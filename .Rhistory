write_csv(tenure_unit_year_clean, here('data', 'housing','census','tenure_units_year.csv'))
tenure_unit_year_clean
tenure_unit_year_clean
view(tenure_unit_year_clean)
# Load data once
data_list <- list(
county_tiers = read_csv(here('data', 'economic', '2024_county_tiers.csv')),
census_pop_estimates = read_csv(here('data', 'demographic', 'census', 'census_pop_estimates.csv')),
age_over_time = read_csv(here('data', 'demographic', 'census', 'age_over_time.csv')),
sex_by_age = read_csv(here('data', 'demographic', 'census', 'sex_by_age.csv')),
tenure_by_age = read_csv(here('data', 'demographic', 'census', 'tenure_by_age.csv')),
edu_attain = read_csv(here('data', 'demographic', 'census', 'edu_attain.csv')),
median_hh_income = read_csv(here('data', 'demographic', 'census', 'median_hh_income.csv')),
travel_time = read_csv(here('data', 'demographic', 'census', 'travel_time.csv')),
race_eth = read_csv(here('data', 'demographic', 'census', 'race_eth.csv')),
population_proj = read_csv(here('data', 'demographic', 'total_projections.csv')),
age_proj = read_csv(here('data', 'demographic', 'age_projections.csv')),
component_pop_change = read_csv(here('data', 'demographic', 'census', 'component_pop_change.csv')),
county2county_flows = read_csv(here('data', 'demographic', 'census', 'county2county_flows.csv')),
county_lodes = read_csv(here('data', 'demographic', 'census', 'county_lodes.csv')),
tenure_units_year = read_csv(here('data', 'housing', 'census', 'tenure_units_year_clean.csv')),
tenure = read_csv(here('data', 'housing', 'census', 'tenure.csv')),
tenure_race = read_csv(here('data', 'demographic', 'census', 'tenure_race.csv')),
rent_data = read_csv(here('data', 'housing', 'census', 'rent_data.csv')),
med_val = read_csv(here('data', 'housing', 'census', 'med_val.csv')),
tenure_year_built = read_csv(here('data', 'housing', 'census', 'tenure_year_built.csv')),
tenure_bedrooms = read_csv(here('data', 'housing', 'census', 'tenure_bedrooms.csv')),
vacancy_status = read_csv(here('data', 'housing', 'census', 'vacancy_status.csv')),
unemployment_rate = read_csv(here('data', 'economic', 'DETAILLAUS.csv')) %>%
mutate(month_year = zoo::as.yearmon(paste(Year, Month), "%Y %m")),
industry = read_csv(here('data', 'economic', 'DETAILQCEW_2000_2021.csv')),
largest_employ = read_csv(here('data', 'economic', 'QCEWLARGESTEMPLOYERS.csv'))
)
runApp()
runApp()
view(tenure_units_year)
tenure_unit_year_clean <-
tenure_units_year |>
mutate(NAME = gsub("(.*),.*", "\\1", NAME)) |>
filter(!label %in% c("Estimate!!Total:", "Estimate!!Total:!!Owner occupied:", "Estimate!!Total:!!Renter occupied:")) |>
mutate(unit_type = case_when(
grepl("detached or attached",label) ~ "Single family",
grepl("2 to 4", label) ~ "2 to 4 units",
grepl("5 to 19", label) ~ "5 to 19 units",
grepl("20 to 49", label) ~ "20 to 49 units",
grepl("50 or more", label) ~"50 or more units",
grepl("Mobile home", label) ~ "Mobile home or other",
)) |>
filter(!is.na(unit_type)) |>
mutate(tenure = case_when(
grepl("Owner", label) ~ "Owner",
grepl("Renter", label) ~ "Renter"
)) |>
mutate(year_built = case_when(
grepl("Built 2020 or later", label) ~ "2020 or later",
grepl("Built 2000 to 2019", label) ~ "2000 to 2019",
grepl("Built 1980 to 1999", label) ~ "1980 to 1999",
grepl("Built 1960 to 1979", label) ~ "1960 to 1979",
grepl("Built 1940 to 1959", label) ~ "1940 to 1959",
grepl("Built 1939 or earlier", label) ~ "1939 or earlier",
)) |>
mutate(unit_type_grouped = case_when(
unit_type %in% c("2 to 4 units", "5 to 19 units", "20 to 49 units") ~ "2 to 49 units",
TRUE ~ unit_type
)) |>
mutate(year_built_grouped = case_when(
year_built %in% c("2000 to 2019", "2020 or later") ~ "2000 or later",
year_built ==  "1980 to 1999" ~ "1980 to 1999",
TRUE ~ "Before 1980"
)) |>
select(-label)
write_csv(tenure_unit_year_clean, here('data', 'housing','census','tenure_units_year.csv'))
runApp()
concept_list <- c("Median Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars)",
"Sex by Age",
"Hispanic or Latino Origin by Race",
"Total Population",
"Tenure",
"Educational Attainment for the Population 25 Years and Over",
"Tenure by Age of Householder",
"Median Household Income in the Past 12 Months (in 2022 Inflation-Adjusted Dollars) by Tenure",
"Travel Time to Work",
"Employment Status for the Population 16 Years and Over",
"Households by Type")
# Run for all geographies
all_data <- NULL
for(g in c("state","county", "place")){
# Pull data
tmp <- get_acs(state = "NC",
geography = g,
variables = vars |> filter(concept %in% concept_list)|> pull(name),
year = 2022,
survey = "acs5") |>
# join labels
left_join(vars|> filter(concept %in% concept_list), by = c("variable" = "name"))
# Label geography in the data
tmp$geo <- g
# Combine with other geographies
all_data <- rbind(all_data,tmp)
}
all_data <- all_data |> mutate(NAME = str_remove(NAME, ", North Carolina"))
sex_by_age <-
all_data |> filter(concept == "Sex by Age") |>
filter(!label %in% c("Estimate!!Total:", "Estimate!!Total:!!Male:", "Estimate!!Total:!!Female:")) |>
mutate(binary_sex = case_when(
grepl("Male",label) ~ "Male",
grepl("Female", label) ~ "Female"
)) |>
mutate(label = str_remove_all(label, "Estimate!!Total:!!Female:!!")) |>
mutate(label = str_remove_all(label, "Estimate!!Total:!!Male:!!")) |>
mutate(age_bracket_raw = case_when(
label %in% c("15 to 17 years", "18 and 19 years") ~ "15 to 19 years",
label %in% c("20 years", "21 years", "22 to 24 years") ~ "20 to 24 years",
label %in% c("60 and 61 years", "62 to 64 years") ~ "60 to 64 years",
label %in% c("65 and 66 years", "67 to 69 years") ~ "65 to 69 years",
TRUE ~ label
)) |>
group_by(NAME, binary_sex, age_bracket_raw) |>
summarize(total = sum(estimate, na.rm = T))
all_data
runApp()
age_over_time
table(age_over_time$year)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(data.table)
runApp()
install.packages("zip")
runApp()
# Load data once
data_list <- list(
county_tiers = read_csv(here('data', 'economic', '2024_county_tiers.csv')),
census_pop_estimates = read_csv(here('data', 'demographic', 'census', 'census_pop_estimates.csv')),
age_over_time = read_csv(here('data', 'demographic', 'census', 'age_over_time.csv')),
sex_by_age = read_csv(here('data', 'demographic', 'census', 'sex_by_age.csv')),
tenure_by_age = read_csv(here('data', 'demographic', 'census', 'tenure_by_age.csv')),
edu_attain = read_csv(here('data', 'demographic', 'census', 'edu_attain.csv')),
median_hh_income = read_csv(here('data', 'demographic', 'census', 'median_hh_income.csv')),
travel_time = read_csv(here('data', 'demographic', 'census', 'travel_time.csv')),
race_eth = read_csv(here('data', 'demographic', 'census', 'race_eth.csv')),
population_proj = read_csv(here('data', 'demographic', 'total_projections.csv')),
age_proj = read_csv(here('data', 'demographic', 'age_projections.csv')),
component_pop_change = read_csv(here('data', 'demographic', 'census', 'component_pop_change.csv')),
county2county_flows = read_csv(here('data', 'demographic', 'census', 'county2county_flows.csv')),
county_lodes = read_csv(here('data', 'demographic', 'census', 'county_lodes.csv')),
tenure_units_year = read_csv(here('data', 'housing', 'census', 'tenure_units_year.csv')),
tenure = read_csv(here('data', 'housing', 'census', 'tenure.csv')),
tenure_race = read_csv(here('data', 'demographic', 'census', 'tenure_race.csv')),
rent_data = read_csv(here('data', 'housing', 'census', 'rent_data.csv')),
med_val = read_csv(here('data', 'housing', 'census', 'med_val.csv')),
tenure_year_built = read_csv(here('data', 'housing', 'census', 'tenure_year_built.csv')),
tenure_bedrooms = read_csv(here('data', 'housing', 'census', 'tenure_bedrooms.csv')),
vacancy_status = read_csv(here('data', 'housing', 'census', 'vacancy_status.csv')),
unemployment_rate = read_csv(here('data', 'economic', 'DETAILLAUS.csv')) %>%
mutate(month_year = zoo::as.yearmon(paste(Year, Month), "%Y %m")),
industry = read_csv(here('data', 'economic', 'DETAILQCEW_2000_2021.csv')),
largest_employ = read_csv(here('data', 'economic', 'QCEWLARGESTEMPLOYERS.csv'))
)
census_pop_estimates
runApp()
census_pop_estimates
data_list$census_pop_estimates
runApp()
runApp()
data <- filtered_data()$census_pop_estimates
filtered_data <- reactiveVal()
observeEvent(input$select_place, {
place <- input$select_place
# Filter data based on the selected place once and store in a reactive value
data <- list(
# Population projections
population_proj = data_list$population_proj[data_list$population_proj$county == place, ],
# Age Projections
age_proj = data_list$age_proj[data_list$age_proj$county == place, ],
# Census Population Estimates
census_pop_estimates = data_list$census_pop_estimates[data_list$census_pop_estimates$place == place, ],
# Age over time
age_over_time = data_list$age_over_time[data_list$age_over_time$NAME == place, ],
# Component Pop Change
component_pop_change = data_list$component_pop_change[data_list$component_pop_change$NAME == place, ],
# County to county flows
county2county_flows = data_list$county2county_flows[data_list$county2county_flows$FULL1_NAME == place, ],
# Population Pyramid
sex_by_age = data_list$sex_by_age[data_list$sex_by_age$NAME == place, ],
# Tenure by age
tenure_by_age = data_list$tenure_by_age[data_list$tenure_by_age$NAME == place, ],
# Race / eth
race_eth = data_list$race_eth[data_list$race_eth$NAME == place, ],
# Educational attainment
edu_attain = data_list$edu_attain[data_list$edu_attain$NAME == place, ],
# Median hh income
median_hh_income = data_list$median_hh_income[data_list$median_hh_income$NAME == place, ],
# Travel time
travel_time = data_list$travel_time[data_list$travel_time$NAME == place, ],
# Vacancy status
vacancy_status = data_list$vacancy_status[data_list$vacancy_status$NAME == place, ],
# Rent unit
rent_unit = data_list$rent_data[data_list$rent_data$NAME == place, ],
# Median value
med_val = data_list$med_val[data_list$med_val$NAME == place, ],
# Tenure
tenure = data_list$tenure[data_list$tenure$NAME == place, ],
# Tenure race
tenure_race = data_list$tenure_race[data_list$tenure_race$NAME == place, ],
# Tenure units year
tenure_units_year = data_list$tenure_units_year[data_list$tenure_units_year$NAME == place, ],
# Tenure bedrooms
tenure_bedrooms = data_list$tenure_bedrooms[data_list$tenure_bedrooms$NAME == place, ],
# Unemployment rate
unemployment_rate = data_list$unemployment_rate[data_list$unemployment_rate$`Area Name` == place, ],
# Industry employment
industry_employment = data_list$industry[data_list$industry$`Area Name` == place, ],
# Largest employers
largest_employ = data_list$largest_employ[data_list$largest_employ$`Area Name` == place, ]
)
filtered_data(data)
})
filtered_data()$census_population_estimates
filtered_data
filtered_data(data)
census_pop_estimates
census_pop_estimates = read_csv(here('data', 'demographic', 'census', 'census_pop_estimates.csv'))
census_pop_estimates
census_pop_estimates |> filter(place == "Almance County")
census_pop_estimates |> filter(place == "Alamance County")
runApp()
view(census_pop_estimates)
census_pop_estimates |> pivot_longer(cols = c(`2010`:`2022`), names_to = "year", values_to = "estimate")
census_pop_estimates |> pivot_longer(cols = c(`2010`:`2022`), names_to = "year", values_to = "estimate")
runApp()
library(openxl)
install.packages("openxlsx")
runApp()
runApp()
all_data |> filter(concept == "Households by Type")
all_data |>
filter(concept == "Households by Type")
all_data |>
filter(concept == "Households by Type") |>
select(label)
all_data |>
filter(concept == "Households by Type") |>
select(label) |> nrow(25)
all_data |>
filter(concept == "Households by Type") |>
select(label) |> head(25)
all_data |>
filter(concept == "Households by Type") |>
select(label) |> view()
all_data |>
filter(concept == "Households by Type") |>
select(label) |>
filter(!label %in% c("Estimate!!Total:", "Estimate!!Total:!!-Married Couple household",
"Estimate!!Total:!!Cohabitating couple household",
"Estimate!!Total:!!Female householder, no spouse or partner present",
"Estimate!!Total:!!Female householder, no spouse or partner present"))
all_data |>
filter(concept == "Households by Type") |>
select(label) |>
filter(!label %in% c("Estimate!!Total:", "Estimate!!Total:!!-Married Couple household:",
"Estimate!!Total:!!Cohabitating couple household:",
"Estimate!!Total:!!Female householder, no spouse or partner present:",
"Estimate!!Total:!!Female householder, no spouse or partner present:"))
all_data |>
filter(concept == "Households by Type") |>
select(label) |>
filter(!label %in% c("Estimate!!Total:", "Estimate!!Total:!!Married Couple household:",
"Estimate!!Total:!!Cohabitating couple household:",
"Estimate!!Total:!!Female householder, no spouse or partner present:",
"Estimate!!Total:!!Female householder, no spouse or partner present:"))
all_data |>
filter(concept == "Households by Type") |>
select(label) |>
filter(!label %in% c("Estimate!!Total:", "Estimate!!Total:!!Married-couple household:",
"Estimate!!Total:!!Cohabitating couple household:",
"Estimate!!Total:!!Female householder, no spouse or partner present:",
"Estimate!!Total:!!Female householder, no spouse or partner present:"))
all_data |>
filter(concept == "Households by Type") |>
select(label) |>
filter(!label %in% c("Estimate!!Total:", "Estimate!!Total:!!Married-couple household:",
"Estimate!!Total:!!Cohabiting couple household:",
"Estimate!!Total:!!Female householder, no spouse or partner present:",
"Estimate!!Total:!!Female householder, no spouse or partner present:"))
all_data |>
filter(concept == "Households by Type") |>
select(label) |>
filter(!label %in% c("Estimate!!Total:", "Estimate!!Total:!!Married-couple household:",
"Estimate!!Total:!!Cohabiting couple household:",
"Estimate!!Total:!!Female householder, no spouse or partner present:",
"Estimate!!Total:!!Male householder, no spouse or partner present:"))
all_data |>
filter(concept == "Households by Type") |>
select(label) |>
filter(!label %in% c("Estimate!!Total:", "Estimate!!Total:!!Married-couple household:",
"Estimate!!Total:!!Cohabiting couple household:",
"Estimate!!Total:!!Female householder, no spouse or partner present:",
"Estimate!!Total:!!Male householder, no spouse or partner present:")) |>
mutate(householder = case_when(
grepl("Married-couple", label) ~ "Married Couple",
grepl("Cohabiting couple", label) ~ "Cohabiting couple",
grepl("Female householder", label) ~ "Female householder",
grepl("Male householder", label) ~ "Male householder"
))
all_data |>
filter(concept == "Households by Type") |>
select(label) |>
filter(!label %in% c("Estimate!!Total:", "Estimate!!Total:!!Married-couple household:",
"Estimate!!Total:!!Cohabiting couple household:",
"Estimate!!Total:!!Female householder, no spouse or partner present:",
"Estimate!!Total:!!Male householder, no spouse or partner present:")) |>
mutate(householder = case_when(
grepl("Married-couple", label) ~ "Married Couple",
grepl("Cohabiting couple", label) ~ "Cohabiting couple",
grepl("Female householder", label) ~ "Female householder",
grepl("Male householder", label) ~ "Male householder"
)) #|>
all_data |>
filter(concept == "Households by Type") |>
select(label) |>
filter(!label %in% c("Estimate!!Total:", "Estimate!!Total:!!Married-couple household:",
"Estimate!!Total:!!Cohabiting couple household:",
"Estimate!!Total:!!Female householder, no spouse or partner present:",
"Estimate!!Total:!!Male householder, no spouse or partner present:")) |>
mutate(householder = case_when(
grepl("Married-couple", label) ~ "Married Couple",
grepl("Cohabiting couple", label) ~ "Cohabiting couple",
grepl("Female householder", label) ~ "Female householder",
grepl("Male householder", label) ~ "Male householder"
)) |>
mutate(hh_type = case_when(
grepl("With children") ~ "Living with children <18",
grepl("With no children") ~ "Not living with children",
grepl("Living alone") ~ "Living alone",
grepl("With relatives") ~ "Living with relatives",
grepl("With only nonrelatives") ~ "Roommates"
))
all_data |>
filter(concept == "Households by Type") |>
select(label) |>
filter(!label %in% c("Estimate!!Total:", "Estimate!!Total:!!Married-couple household:",
"Estimate!!Total:!!Cohabiting couple household:",
"Estimate!!Total:!!Female householder, no spouse or partner present:",
"Estimate!!Total:!!Male householder, no spouse or partner present:")) |>
mutate(householder = case_when(
grepl("Married-couple", label) ~ "Married Couple",
grepl("Cohabiting couple", label) ~ "Cohabiting couple",
grepl("Female householder", label) ~ "Female householder",
grepl("Male householder", label) ~ "Male householder"
)) |>
mutate(hh_type = case_when(
grepl("With children", label) ~ "Living with children <18",
grepl("With no children", label) ~ "Not living with children",
grepl("Living alone", label) ~ "Living alone",
grepl("With relatives", label) ~ "Living with relatives",
grepl("With only nonrelatives", label) ~ "Roommates"
))
all_data |>
filter(concept == "Households by Type") |>
select(label) |>
filter(!label %in% c("Estimate!!Total:", "Estimate!!Total:!!Married-couple household:",
"Estimate!!Total:!!Cohabiting couple household:",
"Estimate!!Total:!!Female householder, no spouse or partner present:",
"Estimate!!Total:!!Male householder, no spouse or partner present:")) |>
mutate(householder = case_when(
grepl("Married-couple", label) ~ "Married Couple",
grepl("Cohabiting couple", label) ~ "Cohabiting couple",
grepl("Female householder", label) ~ "Female householder",
grepl("Male householder", label) ~ "Male householder"
)) |>
mutate(hh_type = case_when(
grepl("With children", label) ~ "Living with children <18",
grepl("With no children", label) ~ "Not living with children",
grepl("Living alone", label) ~ "Living alone",
grepl("With relatives", label) ~ "Living with relatives",
grepl("With only nonrelatives", label) ~ "Roommates"
)) |>
view()
all_data |>
filter(concept == "Households by Type") |>
filter(!label %in% c("Estimate!!Total:", "Estimate!!Total:!!Married-couple household:",
"Estimate!!Total:!!Cohabiting couple household:",
"Estimate!!Total:!!Female householder, no spouse or partner present:",
"Estimate!!Total:!!Male householder, no spouse or partner present:")) |>
mutate(householder = case_when(
grepl("Married-couple", label) ~ "Married Couple",
grepl("Cohabiting couple", label) ~ "Cohabiting couple",
grepl("Female householder", label) ~ "Female householder",
grepl("Male householder", label) ~ "Male householder"
)) |>
mutate(hh_type = case_when(
grepl("With children", label) ~ "Living with children <18",
grepl("With no children", label) ~ "Not living with children",
grepl("Living alone", label) ~ "Living alone",
grepl("With relatives", label) ~ "Living with relatives",
grepl("With only nonrelatives", label) ~ "Roommates"
)) |>
view()
hh_type <-
all_data |>
filter(concept == "Households by Type") |>
filter(!label %in% c("Estimate!!Total:", "Estimate!!Total:!!Married-couple household:",
"Estimate!!Total:!!Cohabiting couple household:",
"Estimate!!Total:!!Female householder, no spouse or partner present:",
"Estimate!!Total:!!Male householder, no spouse or partner present:")) |>
mutate(householder = case_when(
grepl("Married-couple", label) ~ "Married Couple",
grepl("Cohabiting couple", label) ~ "Cohabiting couple",
grepl("Female householder", label) ~ "Female householder",
grepl("Male householder", label) ~ "Male householder"
)) |>
mutate(hh_type = case_when(
grepl("With children", label) ~ "Living with children <18",
grepl("With no children", label) ~ "Not living with children",
grepl("Living alone", label) ~ "Living alone",
grepl("With relatives", label) ~ "Living with relatives",
grepl("With only nonrelatives", label) ~ "Roommates"
))
write_csv(hh_type, here('data', 'demographic', 'census', 'hh_type.csv'))
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("parallel")
library(parallel)
runApp()
runApp()
runApp()
runApp()
runApp()
library(parallel)
# Define a function to read CSV files and convert to data.table
read_csv_as_dt <- function(file_path) {
as.data.table(read_csv(file_path))
}
# List of file paths
file_paths <- list(
county_tiers = here('data', 'economic', '2024_county_tiers.csv'),
census_pop_estimates = here('data', 'demographic', 'census', 'census_pop_estimates.csv'),
age_over_time = here('data', 'demographic', 'census', 'age_over_time.csv'),
sex_by_age = here('data', 'demographic', 'census', 'sex_by_age.csv'),
tenure_by_age = here('data', 'demographic', 'census', 'tenure_by_age.csv'),
edu_attain = here('data', 'demographic', 'census', 'edu_attain.csv'),
median_hh_income = here('data', 'demographic', 'census', 'median_hh_income.csv'),
hh_type = here('data', 'demographic', 'census', 'hh_type.csv'),
travel_time = here('data', 'demographic', 'census', 'travel_time.csv'),
race_eth = here('data', 'demographic', 'census', 'race_eth.csv'),
population_proj = here('data', 'demographic', 'total_projections.csv'),
age_proj = here('data', 'demographic', 'age_projections.csv'),
component_pop_change = here('data', 'demographic', 'census', 'component_pop_change.csv'),
county2county_flows = here('data', 'demographic', 'census', 'county2county_flows.csv'),
county_lodes = here('data', 'demographic', 'census', 'county_lodes.csv'),
tenure_units_year = here('data', 'housing', 'census', 'tenure_units_year.csv'),
tenure = here('data', 'housing', 'census', 'tenure.csv'),
tenure_race = here('data', 'demographic', 'census', 'tenure_race.csv'),
rent_data = here('data', 'housing', 'census', 'rent_data.csv'),
med_val = here('data', 'housing', 'census', 'med_val.csv'),
tenure_year_built = here('data', 'housing', 'census', 'tenure_year_built.csv'),
tenure_bedrooms = here('data', 'housing', 'census', 'tenure_bedrooms.csv'),
vacancy_status = here('data', 'housing', 'census', 'vacancy_status.csv'),
unemployment_rate = here('data', 'economic', 'DETAILLAUS.csv'),
industry = here('data', 'economic', 'DETAILQCEW_2000_2023.csv'),
largest_employ = here('data', 'economic', 'QCEWLARGESTEMPLOYERS.csv')
)
# Start the cluster
cl <- makeCluster(detectCores() - 1)  # Use one less core than available
# Export necessary variables and functions to the cluster environment
clusterExport(cl, c("read_csv_as_dt", "file_paths"))
# Read all CSV files in parallel
data_list <- parLapply(cl, file_paths, function(path) {
as.data.table(read_csv(path))
})
library(data.table)
library(shiny)
library(here)
library(downloadthis)
library(tidyverse)
library(gghighlight)
library(leaflet)
library(reactable)
library(readxl)
library(shinythemes)
library(Cairo)
library(data.table)
library(openxlsx)
library(parallel)
# Read all CSV files in parallel
data_list <- parLapply(cl, file_paths, function(path) {
as.data.table(read_csv(path))
})
# Read all CSV files in parallel
data_list <- parLapply(cl, file_paths, function(path) {
data.table::as.data.table(read_csv(path))
})
library(readr)
# Read all CSV files in parallel
data_list <- parLapply(cl, file_paths, function(path) {
data.table::as.data.table(read_csv(path))
})
data.table::as.data.table(readr::read_csv(path))
runApp()
runApp()
shiny::runApp()
